<style lang="less">
@import '../plugins/wxParse/wxParse.wxss';
// 2.0 这里写样式
.swiper,
.swiper-img {
  width: 750rpx;
  height: 720rpx;
}

.product-info {
  height: 300rpx;
  background-color: #fff;
  padding: 0 16rpx;
}
.product-head {
  height: 38rpx;
  padding: 40rpx 0;
  .price {
    color: #ff2d4a;
    font-size: 50rpx;
    margin-left: -10rpx;
  }
  .old-price {
    color: #999;
    font-size: 26rpx;
  }
}
.product-body {
  display: flex;
  align-items: center;
  justify-content: space-between;
  .product-name {
    font-size: 34rpx;
    width: 546rpx;
    height: 88rpx;
    line-height: 1.3;
    /* 多行文字隐藏省略号 */
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 2;
  }
  .product-like {
    width: 50rpx;
    height: 78rpx;
    border-left: 1rpx solid #ddd;
    padding-left: 46rpx;
    margin-right: 30rpx;
    color: #999;

    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: space-between;
  }
  .icon-shoucang {
    width: 32rpx;
    height: 32rpx;
    margin-top: 10rpx;
  }
}

.product-foot {
  font-size: 30rpx;
  color: #999;
  margin-top: 34rpx;
}

.part {
  background-color: #fff;
  margin: 20rpx 0;
  font-size: 32rpx;
  color: #999;

  &-item {
    display: flex;
    padding: 28rpx 16rpx;
    position: relative;
    align-items: center;
  }

  &-line:after {
    content: '';
    height: 1rpx;
    width: 734rpx;
    background-color: #ddd;
    display: block;
    position: absolute;
    bottom: -1rpx;
  }
  .note {
    color: #333;
    margin-right: 40rpx;
  }
  .description {
    width: 490rpx;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    word-wrap: normal;
  }
  .icon-jiantouyou {
    width: 25rpx;
    height: 25rpx;
    color: #ccc;
    position: absolute;
    right: 46rpx;
    display: flex;
    align-items: center;
    justify-content: center;
  }
}

.tabs-head {
  height: 100rpx;
  background-color: #fff;
  display: flex;
}
.tabs-head .tabs-item {
  flex: 1;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 30rpx;
  position: relative;
}
.tabs-head .active {
  color: #ff2d4a;
  font-weight: 400;
}
.tabs-head .active:after {
  content: '';
  height: 12rpx;
  width: 100%;
  background-color: #ff2d4a;
  position: absolute;
  left: 0;
  bottom: 0;
}
.tabs-body {
  padding: 16rpx;
  padding-bottom: 250rpx;
}
.param-item {
  padding: 30rpx 0;
  font-size: 28rpx;
  display: flex;
  align-items: center;
}
.param-item .note {
  width: 150rpx;
  color: #999;
}
.param-item .description {
  width: 568rpx;
  line-height: 1.3;
}

.fixed-bar {
  width: 750rpx;
  height: 98rpx;
  background-color: #fff;
  position: fixed;
  bottom: 0;
  z-index: 11;
  display: flex;
  align-items: center;
  justify-content: space-between;
}
.fixed-bar .item {
  flex: 1;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}
.fixed-bar .item .iconfont {
  width: 40rpx;
  height: 40rpx;
  font-size: 40rpx;
  color: #999;
}

.fixed-bar .item .item-note {
  margin-top: 10rpx;
  font-size: 22rpx;
  color: #666;
}
.fixed-bar .btn-group {
  display: flex;
}
.fixed-bar .btn {
  width: 213rpx;
  height: 98rpx;
  line-height: 98rpx;
  text-align: center;
  font-size: 30rpx;
  color: #fff;
}
.yellow-button {
  background-color: #ffb400;
}
.red-button {
  background-color: #ff2d4a;
}

.wxParse-content {
  padding: 55rpx;

  .wxParse-a {
    display: none;
  }
}
.fixed-bar {
  .item {
    position: relative;
    .contact_btn {
      opacity: 0;
      position: absolute;
      width: 100%;
      height: 100%;
    }
  }
}
</style>
<template>
  <!-- 1.0 这里写结构 -->
  <!-- 商品详情页 -->
    <swiper class="swiper"
      indicator-dots="true"
      indicator-color="rgba(255,255,255,.5)"
      indicator-active-color="#ffffff"
      interval="2500"
      autoplay="true"
      circular="true">
      <block wx:for="{{ goodsDetail.pics }}" wx:key="index">
        <swiper-item @tap="previewImageHandle({{ item.pics_big }})">
          <image class="swiper-img" src="{{ item.pics_big }}" />
        </swiper-item>
      </block>
    </swiper>
    <view class="product-info">
        <view class="product-head">
            <text class="price">￥{{ goodsDetail.goods_price }}</text>
        </view>
        <view class="product-body">
            <view class="product-name">
                {{ goodsDetail.goods_name }}
            </view>
            <view class="product-like">
                <view class="iconfont icon-shoucang"></view>
                <view>收藏</view>
            </view>
        </view>
        <view class="product-foot">
            快递：<text>免运费</text>
        </view>
    </view>
    <view class="part">
        <view class="part-item part-line">
            <text class="note">促销</text><text class="description color-main">满300减30元</text>
        </view>
        <view class="part-item">
            <text class="note">已选</text><text class="description">黑色/S/1件</text>
        </view>
    </view>
    <view class="part">
        <view class="part-item">
            <text class="note">送至</text><text class="description">广东省广州市天河区珠吉路58号津安创意园传智播客</text>
            <view class="iconfont icon-jiantouyou"></view>
        </view>
    </view>

    <view class="tabs">
        <view class="tabs-head">
            <view class="tabs-item {{ tabsActiveIndex == 0? 'active':'' }}" @tap="switchTabsHandle({{ 0 }})">
                图文详情
            </view>
            <view class="tabs-item {{ tabsActiveIndex == 1? 'active':'' }}" @tap="switchTabsHandle({{ 1 }})">
                规格参数
            </view>
        </view>
        <view class="tabs-body">
            <view class="tabs-content" hidden="{{ tabsActiveIndex == 1 }}">
                <!-- 商品图文展示 -->
                <!-- 引入 WXML 模板 -->
              <import src="/plugins/wxParse/wxParse.wxml"/>
              <!-- 这里data中article为bindName -->
              <template is="wxParse" data="{{wxParseData:article.nodes}}"></template>
            </view>
            <view class="tabs-content" hidden="{{ tabsActiveIndex == 0 }}">
              <!-- 规格参数列表 -->
              <block wx:for="{{ goodsDetail.attrs }}" wx:key="index">
                <view class="param-item">
                    <text class="note">{{ item.attr_name }}</text>
                    <text class="description">{{ item.attr_value }}</text>
                </view>
              </block>
            </view>
        </view>
    </view>

    <view class="fixed-bar">
        <view class="item">
            <button open-type="contact" class="contact_btn">客户</button>
            <view class="iconfont icon-kefu"></view>
            <text class="item-note">联系客服</text>
        </view>
        <view class="item" @tap="goToTabBarCart">
            <view class="iconfont icon-cart"></view>
            <text class="item-note">购物车</text>
        </view>
        <view class="btn-group">
            <view class="btn yellow-button" @tap="addCartHandle">加入购物车</view>
            <view class="btn red-button">立即购买</view>
        </view>
    </view>
</template>

<script>
// 3.0 这里写JS
import wepy from 'wepy'
import api from '../api/api'
import WxParse from '../plugins/wxParse/wxParse'
// 首字母大写
export default class GoodsDetail extends wepy.page {
  // 4.0 这里写JSON配置项
  config = {
    navigationBarTitleText: '商品详情'
  }
  data = {
    goodsDetail: null,
    tabsActiveIndex: 0
  }
  onLoad(options) {
    console.log('onLoad', options)
    api.getProductDetail({
      data: {
        // goods_id: 55578
        goods_id: options.goods_id
      }
    }).then(res => {
      console.log(res)
      this.goodsDetail = res.data
      this.$apply()

      // wxParse 数据绑定
      var parseData = this.goodsDetail.goods_introduce
        /**
         * WxParse.wxParse(bindName , type, data, target,imagePadding)
         * 1.bindName绑定的数据名(必填)
         * 2.type可以为html或者md(必填)
         * 3.data为传入的具体数据(必填)
         * 4.target为Page对象,一般为this(必填)
         * 5.imagePadding为当图片自适应是左右的单一padding(默认为0,可选)
         */
      var that = this
      WxParse.wxParse('article', 'html', parseData, that, 5)
    })
  }
  methods = {
    previewImageHandle(currentImg) {
      // console.log(currentImg)
      let previewImageArr = []
      this.goodsDetail.pics.forEach(item => {
        previewImageArr.push(item.pics_big)
      })
      // console.log(previewImageArr)
      wepy.previewImage({
        current: currentImg, // 当前显示图片的http链接
        urls: previewImageArr // 需要预览的图片http链接列表
      })
    },
    switchTabsHandle(index) {
      console.log(index)
      this.tabsActiveIndex = index
    },
    wxParseImgLoad() {},
    goToTabBarCart() {
      wepy.switchTab({ url: '/pages/cart' })
    },
    addCartHandle() {
      let keys = ['goods_id', 'goods_name', 'goods_price', 'goods_small_logo']
      console.log(keys)
      let goodsCartInfo = {}
      keys.forEach(item => {
        goodsCartInfo[item] = this.goodsDetail[item]
      })
      console.log(goodsCartInfo)

      let cartDataArr = wepy.getStorageSync('cartDataArr') || []
      // 封装一个方法, 用于goods_id校验当前商品是否存在于本地存储cartDataArr中
      let goodsCartIndex = this._goodsCheckInCartByGoodsId(
        goodsCartInfo.goods_id, cartDataArr
      )
      console.log(goodsCartIndex)
      // 额外添加: 1. 用于记录数量的goods_number 2. 用于记录选中状态的selectStatus
      if (goodsCartIndex === -1) {
        // 购物车中第一次添加商品, 把数量初始化为1
        goodsCartInfo.goods_number = 1
        cartDataArr.push(goodsCartInfo)
      } else {
        // 如果存在改商品, 则往器数量上累加即可
        cartDataArr[goodsCartIndex].goods_number++
      }
      // 把本地存储cartDataArr数据更新
      wepy.setStorageSync('cartDataArr', cartDataArr)
      // 商品添加成功后, 用户交互反馈提示
      wepy.showToast({
        title: '添加成功', // 提示的内容,
        icon: 'success', // 图标,
        duration: 1500, // 延迟时间,
        mask: true, // 显示透明蒙层，防止触摸穿透,
        success: res => {}
      })
    }
  }
  _goodsCheckInCartByGoodsId(goodsId, cartDataArr) {
    console.log('_goodsCheckInCartByGoodsId', goodsId, cartDataArr)
    // 校验当前的goods是否存在于cartDataArr中
    let goodsCartIndex = -1
    // 初始值设置为-1, 假设不存在
    for (let i = 0; i < cartDataArr.length; i++) {
      // 遍历当前购物车的数据, 判断一下goods_id是否存在
      if (cartDataArr[i].goods_id === goodsId) {
        // 获取当前商品在购物车的索引值, 把他赋值到goodsCartIndex变量中
        goodsCartIndex = i
        break
      }
    }
    return goodsCartIndex
  }
}
</script>
